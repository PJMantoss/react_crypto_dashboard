{"version":3,"sources":["components/Dashboard.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","price","data","className","options","tooltips","intersect","mode","responsive","maintainAspectRatio","formatData","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","map","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","reverse","App","useState","currencies","setCurrencies","pair","setPair","setPrice","pastData","setPastData","ws","useRef","first","url","useEffect","current","WebSocket","pairs","a","fetch","then","res","json","filtered","filter","quote_currency","sort","b","base_currency","apiCall","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","dataArr","formattedData","fetchHistoricalData","onmessage","e","parse","product_id","name","value","onChange","unSubMsg","unSub","target","cur","idx","id","display_name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f24ab267.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst Dashboard = ({ price, data }) => {\n    const opts = {\n        tooltips: {\n            intersect: false,\n            mode: \"index\"\n        },\n        responsive: true,\n        maintainAspectRatio: false\n    };\n\n    if(price === \"0.00\"){\n        return <h2>Please select a currency pair</h2>\n    }\n\n    return(\n        <div className=\"dashboard\">\n            <h2>{`$${price}`}</h2>\n\n            <div className=\"chart-container\">\n                <Line data={data} options={opts} />\n            </div>\n        </div>\n    )\n};\n\nexport default Dashboard;","export const formatData = data => {\n    let finalData = {\n        labels: [],\n        datasets: [\n            {\n                label: \"price\",\n                data: [],\n                backgroundColor: \"rgb(255, 99, 132, 0.8)\",\n                borderColor: \"rgba(255, 99, 132, 0.2)\",\n                fill: false\n            }\n        ]\n    };\n\n    let dates = data.map(val => {\n        const ts = val[0];\n        let date = new Date(ts * 1000);\n        let day = date.getDate();\n        let month = date.getMonth() + 1;\n        let year = date.getFullYear();\n\n        let final = `${day}-${month}-${year}`;\n        return final;\n    });\n\n    let priceArr = data.map(val => {\n        return val[4];\n    });\n\n    priceArr.reverse();\n    dates.reverse();\n    finalData.labels = dates;\n    finalData.datasets[0].data = priceArr;\n\n    return finalData;\n}","import React, { useState, useRef, useEffect } from 'react';\nimport Dashboard from './components/Dashboard';\nimport { formatData } from './utils';\n\nimport './App.css';\n\nfunction App() {\n  const [currencies, setCurrencies] = useState([]);\n  const [pair, setPair] = useState(\"\");\n  const [price, setPrice] = useState(\"0.00\");\n  const [pastData, setPastData] = useState({});\n  const ws = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n          .then(res => res.json())\n          .then(data => pairs = data);\n\n          let filtered = pairs.filter(pair => {\n            if(pair.quote_currency === \"USD\"){\n              return pair;\n            }\n          });\n\n          filtered = filtered.sort((a,b) => {\n            if(a.base_currency < b.base_currency){\n              return -1;\n            }\n\n            if(a.base_currency > b.base_currency){\n              return 1;\n            }\n\n            return 0;\n          });\n\n          setCurrencies(filtered);\n\n          first.current = true;\n    }\n\n    apiCall();\n\n  }, []);\n\n  useEffect(() => {\n    if(!first.current){\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    }\n\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n\n      await fetch(historicalDataURL)\n          .then(res => res.json())\n          .then(data => (dataArr = data));\n\n          let formattedData = formatData(dataArr);\n\n          setPastData(formattedData);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = e => {\n      let data = JSON.parse(e.data);\n      if(data.type !== \"ticker\"){\n        return;\n      }\n\n      if(data.product_id === pair){\n        setPrice(data.price)\n      }\n    };\n\n  }, [pair]);\n\n  const handleSelect = e => {\n    let unSubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    }\n\n    let unSub = JSON.stringify(unSubMsg);\n\n    ws.current.send(unSub);\n\n    setPair(e.target.value);\n  }\n\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return(\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            )\n          })}\n        </select>\n      }\n\n      <Dashboard data={pastData} price={price} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}